"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[239],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const i={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i.tabItem,o),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>N});var a=n(7462),r=n(7294),i=n(6010),o=n(2466),l=n(6550),s=n(1980),u=n(7392),c=n(12);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,l.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=d(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[s,u]=h({queryString:n,groupId:a}),[p,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),b=(()=>{const e=s??p;return m({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{b&&l(b)}),[b]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,i]),tabValues:i}}var b=n(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function y(e){let{className:t,block:n,selectedValue:l,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==l&&(p(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:d},o,{className:(0,i.Z)("tabs__item",k.tabItem,o?.className,{"tabs__item--active":l===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function g(e){const t=f(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",k.tabList)},r.createElement(y,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function N(e){const t=(0,b.Z)();return r.createElement(g,(0,a.Z)({key:String(t)},e))}},7602:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),i=n(4866),o=n(5162);const l={sidebar_position:1},s="\ud83d\udca7 Actions",u={unversionedId:"reference/actions",id:"reference/actions",title:"\ud83d\udca7 Actions",description:"Actions are the building blocks of AutoPR. They are the smallest unit of work that can be performed by the system.",source:"@site/docs/reference/actions.mdx",sourceDirName:"reference",slug:"/reference/actions",permalink:"/reference/actions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/reference/actions.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcd7 Reference",permalink:"/category/-reference"},next:{title:"\ud83c\udf0a Workflows",permalink:"/reference/workflows"}},c={},p=[{value:"\ud83c\udf31 The Hello World Example",id:"-the-hello-world-example",level:2},{value:"\ud83d\udcdd Anatomy of an Action",id:"-anatomy-of-an-action",level:2},{value:"\ud83d\ude9a Services",id:"-services",level:2},{value:"Key Methods:",id:"key-methods",level:4},{value:"Key Methods:",id:"key-methods-1",level:4},{value:"Key Methods:",id:"key-methods-2",level:4},{value:"Key Methods:",id:"key-methods-3",level:4}],d={toc:p},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-actions"},"\ud83d\udca7 Actions"),(0,r.kt)("p",null,"Actions are the building blocks of AutoPR. They are the smallest unit of work that can be performed by the system."),(0,r.kt)("p",null,"For an in-depth tutorial on how to write a basic action, check out the ",(0,r.kt)("a",{parentName:"p",href:"../tutorials/writing-an-action"},"tutorial"),"."),(0,r.kt)("h2",{id:"-the-hello-world-example"},"\ud83c\udf31 The Hello World Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import pydantic\nfrom autopr.actions.base import Action\n\n\nclass Inputs(pydantic.BaseModel):\n    name: str\n\n\nclass Outputs(pydantic.BaseModel):\n    greeting: str\n\n\nclass Hello(Action[Inputs, Outputs]):\n    id = "hello"\n\n    async def run(self, inputs: Inputs) -> Outputs:\n        return Outputs(greeting=f"Hello, {inputs.name}!")\n\n')),(0,r.kt)("h2",{id:"-anatomy-of-an-action"},"\ud83d\udcdd Anatomy of an Action"),(0,r.kt)("p",null,"Actions are defined as classes that inherit from ",(0,r.kt)("inlineCode",{parentName:"p"},"Action[Inputs, Outputs]"),", where ",(0,r.kt)("inlineCode",{parentName:"p"},"Inputs")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Outputs")," are Pydantic\nmodels that define the input and output data of the action."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," method is the asynchronous entrypoint of the action. It receives the input data as a parameter and returns the output data\nas a result."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," attribute is a unique identifier for the action. It is used to reference the action in the workflows."),(0,r.kt)("h2",{id:"-services"},"\ud83d\ude9a Services"),(0,r.kt)("p",null,"Actions are able to perform both routine and platform-specific throught the utilization of ",(0,r.kt)("strong",{parentName:"p"},"services"),".\nThese services abstract and encapsulate specialized functions, enabling actions to operate seamlessly across different contexts."),(0,r.kt)("p",null,"They are accessible as instance attributes. For example, if you'd like to cache some data, you can do so by calling\n",(0,r.kt)("inlineCode",{parentName:"p"},"self.cache_service.store(key, value)"),", and retrieve it later with ",(0,r.kt)("inlineCode",{parentName:"p"},"self.cache_service.retrieve(key)"),"."),(0,r.kt)("p",null,"The services available are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"publish_service"),": Streamlines the creation, management, and publishing of structured updates to pull request (PR) descriptions."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"platform_service"),": Provides a suite of tools tailored for interactions with platforms (eg. Github), allowing for tasks like fetching issue or PR metadata."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"cache_service"),": Ensures data persistence by allowing actions to save and retrieve data across different runs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"commit_service"),": Offers a structured approach to git operations, such as staging, committing, and pushing changes.")),(0,r.kt)("p",null,"Below are listed all the mentioned services, with their methods and properties."),(0,r.kt)(i.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"publish_service",label:"Publish Service",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"PublishService")," provides a structured way to publish updates on the status of the action.\nYou can modify the PR, add simple textual updates, code blocks, or create collapsible sections."),(0,r.kt)("p",null,"Example of usage can be seen in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/irgolic/AutoPR/blob/main/autopr/actions/prompt.py"},(0,r.kt)("inlineCode",{parentName:"a"},"prompt")),"."),(0,r.kt)("h4",{id:"key-methods"},"Key Methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"publish_update(text, section_title=None)"),": Adds a textual update to the current section."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"publish_code_block(heading, code, ...)"),": Embeds a code block as a collapsible child in the current section."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"start_section(title)"),": Initializes a new section."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"update_section(title: str)"),": Updates the title of the current section."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"end_section(title=None)"),": Concludes the current section."))),(0,r.kt)(o.Z,{value:"platform_service",label:"Platform Service",mdxType:"TabItem"},(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"PlatformService")," offers platform-specific operations, such as getting issue, retrieving PR, and updating PR comments."),(0,r.kt)("h4",{id:"key-methods-1"},"Key Methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"find_existing_pr(head_branch, base_branch)"),": Searches for an existing open pull request with the specified head and base branches."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"create_pr(title, bodies, draft, head_branch, base_branch)"),": Creates a new pull request on GitHub."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"update_pr_body(pr_number, body)"),": Modifies the body of an existing pull request."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"update_pr_title(pr_number, title)"),": Alters the title of an existing pull request."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"update_comment(comment_id, body)"),": Updates the content of a specific comment on GitHub."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"publish_comment(text, issue_number)"),": Adds a comment to a specific issue or pull request."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"set_pr_draft_status(pr_number, is_draft)"),": Adjusts the draft status of a pull request."))),(0,r.kt)(o.Z,{value:"cache_service",label:"Cache Service",mdxType:"TabItem"},(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CacheService")," offers a mechanism to store and retrieve data in a caching system, making it easier to manage\ntransient data that doesn't need permanent storage but should be quickly accessible. In the backend, ",(0,r.kt)("inlineCode",{parentName:"p"},"CacheService")," is implemented with ",(0,r.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/shelve.html"},"shelve"),"."),(0,r.kt)("p",null,"Example of usage can be seen in action ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/irgolic/AutoPR/blob/main/autopr/actions/prompt.py"},(0,r.kt)("inlineCode",{parentName:"a"},"prompt")),"."),(0,r.kt)("h4",{id:"key-methods-2"},"Key Methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"store(key, value, namespace=None)"),": Saves the provided value with the specified key in the cache."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"retrieve(key, namespace=None)"),": Retrieves the value associated with the specified key from the cache. If the key isn't found, it returns ",(0,r.kt)("inlineCode",{parentName:"li"},"None"),"."))),(0,r.kt)(o.Z,{value:"commit_service",label:"Commit Service",mdxType:"TabItem"},(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"CommitService")," offers a structured way to manage git operations on a repository, particularly focusing on creating\nbranches, committing changes, and pushing updates to remote repositories."),(0,r.kt)("p",null,"Example of usage can be seen in actions\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/irgolic/AutoPR/blob/main/autopr/actions/commit_and_push.py"},(0,r.kt)("inlineCode",{parentName:"a"},"commit_and_push")),"."),(0,r.kt)("h4",{id:"key-methods-3"},"Key Methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"commit(commit_message, push=True, filepaths=None)"),": Handles the commit operation. If there's an existing empty\ncommit, it removes it. It then stages changes, either all changes or only those specified in ",(0,r.kt)("inlineCode",{parentName:"li"},"filepaths"),", and makes a\ncommit with the provided ",(0,r.kt)("inlineCode",{parentName:"li"},"commit_message"),". If ",(0,r.kt)("inlineCode",{parentName:"li"},"push")," is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"True"),", it also pushes the commit to the remote repository.")))))}h.isMDXComponent=!0}}]);