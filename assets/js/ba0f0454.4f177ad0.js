"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[78],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=u(n),h=r,f=p["".concat(s,".").concat(h)]||p[h]||c[h]||l;return n?a.createElement(f,i(i({ref:t},m),{},{components:n})):a.createElement(f,i({ref:t},m))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>_});var a=n(7462),r=n(7294),l=n(6010),i=n(2466),o=n(6550),s=n(1980),u=n(7392),m=n(12);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function c(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function d(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=c(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[s,u]=f({queryString:n,groupId:a}),[p,d]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,m.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),w=(()=>{const e=s??p;return h({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{w&&o(w)}),[w]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),d(e)}),[u,d,l]),tabValues:l}}var w=n(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const m=[],{blockElementScrollPositionUntilNextRender:p}=(0,i.o5)(),c=e=>{const t=e.currentTarget,n=m.indexOf(t),a=u[n].value;a!==o&&(p(t),s(a))},h=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=m.indexOf(e.currentTarget)+1;t=m[n]??m[0];break}case"ArrowLeft":{const n=m.indexOf(e.currentTarget)-1;t=m[n]??m[m.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>m.push(e),onKeyDown:h,onClick:c},i,{className:(0,l.Z)("tabs__item",k.tabItem,i?.className,{"tabs__item--active":o===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function b(e){const t=d(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k.tabList)},r.createElement(g,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function _(e){const t=(0,w.Z)();return r.createElement(b,(0,a.Z)({key:String(t)},e))}},7307:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),l=n(4866),i=n(5162);const o={sidebar_position:2},s="\ud83c\udf0a Writing a Workflow",u={unversionedId:"tutorials/writing-a-workflow",id:"tutorials/writing-a-workflow",title:"\ud83c\udf0a Writing a Workflow",description:"In this tutorial, we'll write a simple workflow that summarizes the changes in a pull request.",source:"@site/docs/tutorials/writing-a-workflow.mdx",sourceDirName:"tutorials",slug:"/tutorials/writing-a-workflow",permalink:"/tutorials/writing-a-workflow",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials/writing-a-workflow.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udca7 Writing an Action",permalink:"/tutorials/writing-an-action"},next:{title:"\ud83d\udcc4 Writing YAML with Validation",permalink:"/tutorials/setting-up-yaml-schema"}},m={},p=[{value:"\ud83d\udc23 Before we get Started",id:"-before-we-get-started",level:2},{value:"\ud83d\udca6 The Actions",id:"-the-actions",level:2},{value:"\ud83c\udf0a The Workflow Definition",id:"-the-workflow-definition",level:2},{value:"\ud83c\udfc3\u200d Defining the <code>summarize_my_pr</code> workflow",id:"-defining-the-summarize_my_pr-workflow",level:2},{value:"Getting the Diff of the Pull Request",id:"getting-the-diff-of-the-pull-request",level:3},{value:"Generating the Summary",id:"generating-the-summary",level:3},{value:"The full <code>summarize_my_pr</code> workflow",id:"the-full-summarize_my_pr-workflow",level:3},{value:"\ud83c\udfc3\u200d Defining the <code>summarize_and_comment</code> Workflow",id:"-defining-the-summarize_and_comment-workflow",level:2},{value:"Invoking the <code>summarize_my_pr</code> Workflow",id:"invoking-the-summarize_my_pr-workflow",level:3},{value:"Posting the Summary as a Comment",id:"posting-the-summary-as-a-comment",level:3},{value:"The full <code>summarize_and_comment</code> Workflow",id:"the-full-summarize_and_comment-workflow",level:3},{value:"\ud83c\udf0a The Complete Workflow File",id:"-the-complete-workflow-file",level:2},{value:"\ud83c\udfc1 Triggering",id:"-triggering",level:2}],c={toc:p},h="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-writing-a-workflow"},"\ud83c\udf0a Writing a Workflow"),(0,r.kt)("p",null,"In this tutorial, we'll write a simple workflow that summarizes the changes in a pull request.\nPlease note that this workflow resembles one of the default workflows in AutoPR, but is altered for sake of demonstration."),(0,r.kt)("p",null,"You can define custom workflows in the ",(0,r.kt)("inlineCode",{parentName:"p"},".autopr/workflows.yaml")," file or ",(0,r.kt)("inlineCode",{parentName:"p"},".autopr/workflows/*.yaml")," folder in your repository."),(0,r.kt)("p",null,"For a comprehensive overview of how to define workflows, please refer to ",(0,r.kt)("a",{parentName:"p",href:"../reference/workflows"},"the workflows refrence"),"."),(0,r.kt)("h2",{id:"-before-we-get-started"},"\ud83d\udc23 Before we get Started"),(0,r.kt)("p",null,"Workflows are written in YAML."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"setting-up-yaml-schema"},(0,r.kt)("strong",{parentName:"a"},"Set up validation in your editor"))," before you begin writing a workflow;\nthis will help you discover the available actions and workflows, and help you write workflows faster and with fewer errors."),(0,r.kt)("p",null,"You may use either the ",(0,r.kt)("inlineCode",{parentName:"p"},"workflow_schema.json")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"strict_workflow_schema.json")," file.\nIf you'd like to strictly type the workflow invocations as well, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"strict_workflow_schema.json")," file.\nAs per the guide linked above,\nyou will need to regenerate it after defining the skeletons of your workflows, as it is generated from the workflows themselves."),(0,r.kt)("h2",{id:"-the-actions"},"\ud83d\udca6 The Actions"),(0,r.kt)("p",null,"The actions we'll be using are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bash"),", to get the diff of the pull request;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"prompt"),", to prompt the user to summarize the changes in the pull request;"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"comment"),", to post the summary as a comment on the pull request.")),(0,r.kt)("h2",{id:"-the-workflow-definition"},"\ud83c\udf0a The Workflow Definition"),(0,r.kt)("p",null,"Let's define the skeleton, including the inputs and outputs, which are defined as a list of variable names."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"summarize_my_pr:\n  inputs:\n    # The pull request the workflow was triggered by\n    - pull_request\n  outputs:\n    # The summary of the changes in the pull request\n    - summary\n  steps:\n    ...\n\nsummarize_and_comment:\n  inputs:\n    # The pull request the workflow was triggered by\n    - pull_request\n  steps:\n    ...\n")),(0,r.kt)("p",null,"We have defined two workflows, one which summarizes the PR, and one which invokes it, and then posts the summary as a comment on the pull request.\n",(0,r.kt)("inlineCode",{parentName:"p"},"summarize_and_comment")," will be the entrypoint we would specify in the trigger."),(0,r.kt)("p",null,"In this case, ",(0,r.kt)("inlineCode",{parentName:"p"},"pull_request")," is a special input that is automatically passed when the workflow is triggered by a pull request.\nIts model is defined as ",(0,r.kt)("inlineCode",{parentName:"p"},"PullRequest")," in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/irgolic/AutoPR/blob/main/autopr/models/artifacts.py#L31"},(0,r.kt)("inlineCode",{parentName:"a"},"models/artifacts.py")),"."),(0,r.kt)("h2",{id:"-defining-the-summarize_my_pr-workflow"},"\ud83c\udfc3\u200d Defining the ",(0,r.kt)("inlineCode",{parentName:"h2"},"summarize_my_pr")," workflow"),(0,r.kt)("p",null,"Let's add the steps one by one."),(0,r.kt)("h3",{id:"getting-the-diff-of-the-pull-request"},"Getting the Diff of the Pull Request"),(0,r.kt)("p",null,"We will invoke ",(0,r.kt)("inlineCode",{parentName:"p"},"git diff")," bash command, against the pull request's base commit, to get the diff of the pull request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- action: bash\n  inputs:\n    command: 'git diff {{ pull_request.base_commit_sha }}'\n  outputs:\n    stdout: pr_diff\n")),(0,r.kt)("p",null,"Inputs are ",(0,r.kt)("a",{parentName:"p",href:"https://jinja.palletsprojects.com/en/3.0.x/"},"jinja2")," templates by default,\nwhich means we can use variables like ",(0,r.kt)("inlineCode",{parentName:"p"},"pull_request.base_commit_sha")," in them."),(0,r.kt)("p",null,"Outputs define the names of the variables that the action will output."),(0,r.kt)("p",null,"Alternatively, we could explicitly denote the input as a template,\nor define it as a template first, and then explicitly reference it as a variable.\nWe could even construct the string with a python lambda function."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"explicittemplate",label:"Explicit Template",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- action: bash\n  inputs:\n    command:\n      template: 'git diff {{ pull_request.base_commit_sha }}'\n  outputs:\n    stdout: pr_diff\n"))),(0,r.kt)(i.Z,{value:"setvars",label:"Separate Variable",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- set_vars:\n    pr_diff_command:\n      template: 'git diff {{ pull_request.base_commit_sha }}'\n- action: bash\n  inputs:\n    command:\n      var: pr_diff_command\n  outputs:\n    stdout: pr_diff\n"))),(0,r.kt)(i.Z,{value:"lambda",label:"Lambda",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'- action: bash\n  inputs:\n    command:\n      lambda: |\n        "git diff " + pull_request.base_commit_sha\n  outputs:\n    stdout: pr_diff\n')))),(0,r.kt)("p",null,"Please see ",(0,r.kt)("a",{parentName:"p",href:"../reference/workflows#variable-declarations"},"the workflows refrence")," for more information on all the possible ways to define inputs."),(0,r.kt)("h3",{id:"generating-the-summary"},"Generating the Summary"),(0,r.kt)("p",null,"Next, we'll prompt OpenAI's language models to summarize the changes in the pull request."),(0,r.kt)("p",null,"The action takes instructions and a prompt as inputs, as well as prompt context.\nPrompt context is a list of variables and headings that prefix the language model prompt.\nThe entries follow a similar syntax to ",(0,r.kt)("inlineCode",{parentName:"p"},"set_vars")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"inputs"),", allowing use of the ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"template"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"lambda")," keywords coupled with the ",(0,r.kt)("inlineCode",{parentName:"p"},"heading"),"."),(0,r.kt)("p",null,"The action outputs the result of the prompt as a variable caled ",(0,r.kt)("inlineCode",{parentName:"p"},"summary"),"."),(0,r.kt)("p",null,"If you'd like to abstract any input (such as the prompt) out into a parameter configurable in the trigger definition,\nyou can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"param")," keyword and a default value to reference the variable.\nThis way, you can define the default value in the workflow definition, and override it in the trigger definition.\nFor sake of example, let's go with the parameterized version."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"simpleprompt",label:"Simple",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- action: prompt\n  inputs:\n    instructions: \"Express yourself in beautiful markdown, mostly with line items, each prefixed with an emoji.\"\n    prompt: |\n      Summarize the changes in the pull request for each file, with concrete line items,\n      prefix the line items with emoji to semantically highlight the contents of the changes.\n      The file may have been trimmed, there will be a `... (trimmed) ...` line in the diff if so.\n    prompt_context:\n      - var: pr_diff\n        heading: 'Diff of the changes in the pull request'\n  outputs:\n    result: summary\n"))),(0,r.kt)(i.Z,{value:"paramprompt",label:"Parameterized",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- action: prompt\n  inputs:\n    instructions: \"Express yourself in beautiful markdown, mostly with line items, each prefixed with an emoji.\"\n    prompt:\n      param:\n        name: SUMMARY_PROMPT\n        default: |\n          Summarize the changes in the pull request for each file, with concrete line items,\n          prefix the line items with emoji to semantically highlight the contents of the changes.\n          The file may have been trimmed, there will be a `... (trimmed) ...` line in the diff if so.\n    prompt_context:\n      - var: pr_diff\n        heading: 'Diff of the changes in the pull request'\n  outputs:\n    result: summary\n")))),(0,r.kt)("p",null,"By default, the ",(0,r.kt)("inlineCode",{parentName:"p"},"prompt")," action invokes ",(0,r.kt)("inlineCode",{parentName:"p"},"chatgpt-3.5-turbo-16k")," model, but we can specify a different model by setting the ",(0,r.kt)("inlineCode",{parentName:"p"},"model")," input."),(0,r.kt)("h3",{id:"the-full-summarize_my_pr-workflow"},"The full ",(0,r.kt)("inlineCode",{parentName:"h3"},"summarize_my_pr")," workflow"),(0,r.kt)("p",null,"Our ",(0,r.kt)("inlineCode",{parentName:"p"},"summarize_my_pr")," workflow is now complete."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"summarize_my_pr:\n  inputs:\n    # The pull request the workflow was triggered by\n    - pull_request\n  outputs:\n    # The summary of the changes in the pull request\n    - summary\n  steps:\n    # Get the diff of the pull request\n    - action: bash\n      inputs:\n        command: 'git diff {{ pull_request.base_commit_sha }}'\n      outputs:\n        stdout: pr_diff\n    # Generate the summary\n    - action: prompt\n      inputs:\n        instructions: \"Express yourself in beautiful markdown, mostly with line items, each prefixed with an emoji.\"\n        prompt:\n          param:\n            name: SUMMARY_PROMPT\n            default: |\n              Summarize the changes in the pull request for each file, with concrete line items,\n              prefix the line items with emoji to semantically highlight the contents of the changes.\n              The file may have been trimmed, there will be a `... (trimmed) ...` line in the diff if so.\n        prompt_context:\n          - var: pr_diff\n            heading: 'Diff of the changes in the pull request'\n      outputs:\n        result: summary\n")),(0,r.kt)("h2",{id:"-defining-the-summarize_and_comment-workflow"},"\ud83c\udfc3\u200d Defining the ",(0,r.kt)("inlineCode",{parentName:"h2"},"summarize_and_comment")," Workflow"),(0,r.kt)("p",null,"Now, we'll define the ",(0,r.kt)("inlineCode",{parentName:"p"},"summarize_and_comment")," workflow, which invokes the ",(0,r.kt)("inlineCode",{parentName:"p"},"summarize_my_pr")," workflow,\nand then posts the summary as a comment on the pull request by running the ",(0,r.kt)("inlineCode",{parentName:"p"},"comment")," action."),(0,r.kt)("h3",{id:"invoking-the-summarize_my_pr-workflow"},"Invoking the ",(0,r.kt)("inlineCode",{parentName:"h3"},"summarize_my_pr")," Workflow"),(0,r.kt)("p",null,"We'll invoke the ",(0,r.kt)("inlineCode",{parentName:"p"},"summarize_my_pr")," workflow, pass the pull request as an input, and receive the summary as an output."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- workflow: summarize_my_pr\n  inputs:\n    pull_request:\n      var: pull_request\n  outputs:\n    summary: comment_text\n")),(0,r.kt)("p",null,"At this point, if you're using ",(0,r.kt)("inlineCode",{parentName:"p"},"strict_workflow_schema.json")," for validation,\nand you've not regenerated it since defining the ",(0,r.kt)("inlineCode",{parentName:"p"},"summarize_my_pr")," workflow,\nyou'll get an error on the above step.\nFollow the instructions in the ",(0,r.kt)("a",{parentName:"p",href:"setting-up-yaml-schema"},(0,r.kt)("strong",{parentName:"a"},"validation guide"))," to regenerate the schema."),(0,r.kt)("h3",{id:"posting-the-summary-as-a-comment"},"Posting the Summary as a Comment"),(0,r.kt)("p",null,"Finally, we'll post the summary as a comment on the pull request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- action: comment\n  inputs:\n    comment:\n      var: comment_text\n")),(0,r.kt)("p",null,"The action takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"comment")," input (the ",(0,r.kt)("inlineCode",{parentName:"p"},"comment_text")," variable returned by the ",(0,r.kt)("inlineCode",{parentName:"p"},"summarize_my_pr")," workflow),\nwhich will be posted on the pull request."),(0,r.kt)("h3",{id:"the-full-summarize_and_comment-workflow"},"The full ",(0,r.kt)("inlineCode",{parentName:"h3"},"summarize_and_comment")," Workflow"),(0,r.kt)("p",null,"The complete ",(0,r.kt)("inlineCode",{parentName:"p"},"summarize_and_comment")," workflow is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"summarize_and_comment:\n  inputs:\n    # The pull request the workflow was triggered by\n    - pull_request\n  steps:\n    # Summarize the pull request\n    - workflow: summarize_my_pr\n      inputs:\n        pull_request:\n          var: pull_request\n      outputs:\n        summary: comment_text\n    # Post the summary as a comment on the pull request\n    - action: comment\n      inputs:\n        comment:\n          var: comment_text\n")),(0,r.kt)("h2",{id:"-the-complete-workflow-file"},"\ud83c\udf0a The Complete Workflow File"),(0,r.kt)("p",null,"The complete workflow file is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"summarize_my_pr:\n  inputs:\n    # The pull request the workflow was triggered by\n    - pull_request\n\n  outputs:\n    # The summary of the changes in the pull request\n    - summary\n\n  steps:\n    # Get the diff of the pull request\n    - action: bash\n      inputs:\n        command: 'git diff {{ pull_request.base_commit_sha }}'\n      outputs:\n        stdout: pr_diff\n\n    # Generate the summary\n    - action: prompt\n      inputs:\n        instructions: \"Express yourself in beautiful markdown, mostly with line items, each prefixed with an emoji.\"\n        prompt:\n          param:\n            name: SUMMARY_PROMPT\n            default: |\n              Summarize the changes in the pull request for each file, with concrete line items,\n              prefix the line items with emoji to semantically highlight the contents of the changes.\n              The file may have been trimmed, there will be a `... (trimmed) ...` line in the diff if so.\n        prompt_context:\n          - var: pr_diff\n            heading: 'Diff of the changes in the pull request'\n      outputs:\n        result: summary\n\nsummarize_pr:\n  inputs:\n    # The pull request the workflow was triggered by\n    - pull_request\n\n  steps:\n    # Summarize the pull request\n    - workflow: summarize_my_pr\n      inputs:\n        pull_request:\n          var: pull_request\n      outputs:\n        summary: summary\n\n    # Post the summary as a comment on the pull request\n    - action: comment\n      inputs:\n        comment:\n          var: summary\n")),(0,r.kt)("h2",{id:"-triggering"},"\ud83c\udfc1 Triggering"),(0,r.kt)("p",null,"Finally, we'll define the trigger that invokes the ",(0,r.kt)("inlineCode",{parentName:"p"},"summarize_and_comment")," workflow."),(0,r.kt)("p",null,"The parameterized version will override the prompt with a custom prompt,\nif the ",(0,r.kt)("inlineCode",{parentName:"p"},"prompt")," action invocation above in ",(0,r.kt)("inlineCode",{parentName:"p"},"summarize_my_pr")," is parameterized."),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"simpletrigger",label:"Simple",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'triggers:\n  - type: label\n    label_substring: "summarize"\n    on_pull_request: true\n    run: summarize_and_comment\n'))),(0,r.kt)(i.Z,{value:"paramtrigger",label:"Parameterized",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'triggers:\n  - type: label\n    label_substring: "summarize"\n    on_pull_request: true\n    run: summarize_and_comment\n    parameters:\n      SUMMARY_PROMPT: |\n        Summarize the changes in the pull request for each file in 3-5 sentences.\n        The file may have been trimmed, there will be a `... (trimmed) ...` line in the diff if so.\n')))))}f.isMDXComponent=!0}}]);