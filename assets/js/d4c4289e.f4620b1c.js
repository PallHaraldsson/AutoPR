"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[731],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),f=a,d=m["".concat(s,".").concat(f)]||m[f]||c[f]||i;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5185:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:10},o="\ud83c\udf0a Workflow catalogue",l={unversionedId:"workflow-catalogue",id:"workflow-catalogue",title:"\ud83c\udf0a Workflow catalogue",description:"See here for a list of default workflows that you can use in your own repositories.",source:"@site/docs/workflow-catalogue.mdx",sourceDirName:".",slug:"/workflow-catalogue",permalink:"/workflow-catalogue",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/workflow-catalogue.mdx",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udca7 Action Catalogue",permalink:"/action-catalogue"}},s={},u=[{value:"<code>generate_readme_summaries</code>",id:"generate_readme_summaries",level:2},{value:"<code>publish_todo_issues</code>",id:"publish_todo_issues",level:2},{value:"<code>api_git_history</code>",id:"api_git_history",level:2},{value:"<code>summarize_pr</code>",id:"summarize_pr",level:2}],p={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-workflow-catalogue"},"\ud83c\udf0a Workflow catalogue"),(0,a.kt)("p",null,"See here for a list of default workflows that you can use in your own repositories."),(0,a.kt)("h2",{id:"generate_readme_summaries"},(0,a.kt)("inlineCode",{parentName:"h2"},"generate_readme_summaries")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"generate_readme_summaries")," workflow:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"crawls the repository's folders,"),(0,a.kt)("li",{parentName:"ul"},"summarizes each file and folder,"),(0,a.kt)("li",{parentName:"ul"},"generates a ",(0,a.kt)("inlineCode",{parentName:"li"},"README.md")," file with the summaries in each folder.")),(0,a.kt)("p",null,"The following parameters are available:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FILE_SUMMARY_PROMPT"),": the prompt to use when asking for a summary of a file,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FILE_SUMMARY_INSTRUCTIONS"),": the instructions to use when asking for a summary of a file,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FOLDER_SUMMARY_PROMPT"),": the prompt to use when asking for a summary of a folder,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FOLDER_SUMMARY_INSTRUCTIONS"),": the instructions to use when asking for a summary of a folder,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IGNORE_FILES"),": a list of files to ignore when crawling the repository,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"EMPTY_FILE_SUMMARY"),": the summary to use when a file is empty.")),(0,a.kt)("p",null,"You can invoke it by using the following trigger:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'triggers:\n  - branch_name: main\n    run:\n      workflow: generate_readme_summaries\n      parameters:\n        FILE_SUMMARY_PROMPT: "Write an executive summary of this file, intended for someone seeing it for the first time. Write 3-6 bullet points, prefixed with emojis."\n        FILE_SUMMARY_INSTRUCTIONS: "Respond in 3-6 bullet points, using plenty of emojis."\n        FOLDER_SUMMARY_PROMPT: "Write an executive summary of this folder, intended for someone seeing it for the first time. Respond in 3-5 sentences."\n        FOLDER_SUMMARY_INSTRUCTIONS: "Respond in simple sentences, using plenty of emojis."\n        IGNORE_FILES:\n          - docs\n        EMPTY_FILE_SUMMARY: "This file is empty."\n')),(0,a.kt)("p",null,"The above trigger will run the workflow whenever the ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," branch is updated."),(0,a.kt)("h2",{id:"publish_todo_issues"},(0,a.kt)("inlineCode",{parentName:"h2"},"publish_todo_issues")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"publish_todo_issues")," manages code annotations by:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Scanning the repository for all occurrences of TODOs and FIXMEs,"),(0,a.kt)("li",{parentName:"ul"},"Leveraging LLM to obtain suggestions for solving them and assessing their difficulty,"),(0,a.kt)("li",{parentName:"ul"},"Posting them as issues in the repository.")),(0,a.kt)("p",null,"The following parameters are available:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ISSUE_LABEL_CHOICES"),": the choices to use when asking for the difficulty of a task,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ISSUE_LABEL_PROMPT"),": the prompt to use when asking for the difficulty of a task,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ISSUE_DESCRIPTION_PROMPT"),": the prompt to use when asking for a resolution of a TODO,"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ISSUE_DESCRIPTION_INSTRUCTIONS"),": the instructions to use when asking for a resolution of a TODO.")),(0,a.kt)("p",null,"You can invoke it by using the following trigger:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'triggers:\n  - branch_name: main\n    run:\n      workflow: publish_todo_issues\n      parameters:\n        ISSUE_LABEL_CHOICES:\n          - "easy"\n          - "medium"\n          - "hard"\n        ISSUE_LABEL_PROMPT: |\n          How hard is this task?\n        ISSUE_DESCRIPTION_PROMPT: |\n          What tips can you give to someone that\'s resolving this TODO?\n        ISSUE_DESCRIPTION_INSTRUCTIONS: |\n          Respond in 1-3 sentences.\n')),(0,a.kt)("h2",{id:"api_git_history"},(0,a.kt)("inlineCode",{parentName:"h2"},"api_git_history")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"api_git_history")," workflow creates a history of selected API GET requests payloads by:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"fetching an API GET request,"),(0,a.kt)("li",{parentName:"ul"},"saving the response payload to a file,"),(0,a.kt)("li",{parentName:"ul"},"committing the file to the repository.")),(0,a.kt)("p",null,"The following inputs are available:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"endpoint_url"),": the URL of the API endpoint to fetch"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"headers"),": the headers to use when fetching the API endpoint"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"filepath"),": the path of the file to save the response payload to")),(0,a.kt)("p",null,"You can invoke it by using ",(0,a.kt)("a",{parentName:"p",href:"/reference/triggers#-properties-of-different-triggers"},"Cron Trigger"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'triggers:\n  - cron_schedule: "0 0 * * *"\n    run: \n      workflow: api_git_history\n      inputs: \n        endpoint_url: \n          const: "https://jsonplaceholder.typicode.com/todos"\n        headers: \n          const: {"Content-type": "application/json; charset=UTF-8"}\n        filepath:\n          const: "todos.json"\n')),(0,a.kt)("h2",{id:"summarize_pr"},(0,a.kt)("inlineCode",{parentName:"h2"},"summarize_pr")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"summarize_pr")," workflow summarizes a pull request by:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"getting the diff of the pull request,"),(0,a.kt)("li",{parentName:"ul"},"generating a summary of the diff,"),(0,a.kt)("li",{parentName:"ul"},"posting a comment with the summary.")),(0,a.kt)("p",null,"You can invoke it by using the following trigger:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"triggers:\n  - type: label\n    label_substring: summarize\n    on_pull_request: true\n    workflow: summarize_pr\n")),(0,a.kt)("p",null,"And adding a ",(0,a.kt)("inlineCode",{parentName:"p"},"summarize")," label to a pull request."))}c.isMDXComponent=!0}}]);