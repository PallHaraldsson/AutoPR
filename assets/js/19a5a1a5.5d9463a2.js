"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[963],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=a.createContext({}),l=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(u.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,h=d["".concat(u,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3612:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7294),o=n(6010),r=n(5281),i=n(5999);const s={admonition:"admonition_LlT9",admonitionHeading:"admonitionHeading_tbUL",admonitionIcon:"admonitionIcon_kALy",admonitionContent:"admonitionContent_S0QG"};const u={note:{infimaClassName:"secondary",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))},label:a.createElement(i.Z,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)"},"note")},tip:{infimaClassName:"success",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))},label:a.createElement(i.Z,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)"},"tip")},danger:{infimaClassName:"danger",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 12 16"},a.createElement("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))},label:a.createElement(i.Z,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)"},"danger")},info:{infimaClassName:"info",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 14 16"},a.createElement("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))},label:a.createElement(i.Z,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)"},"info")},caution:{infimaClassName:"warning",iconComponent:function(){return a.createElement("svg",{viewBox:"0 0 16 16"},a.createElement("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))},label:a.createElement(i.Z,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)"},"caution")}},l={secondary:"note",important:"info",success:"tip",warning:"danger"};function c(e){const{mdxAdmonitionTitle:t,rest:n}=function(e){const t=a.Children.toArray(e),n=t.find((e=>a.isValidElement(e)&&"mdxAdmonitionTitle"===e.props?.mdxType)),o=a.createElement(a.Fragment,null,t.filter((e=>e!==n)));return{mdxAdmonitionTitle:n,rest:o}}(e.children);return{...e,title:e.title??t,children:n}}function d(e){const{children:t,type:n,title:i,icon:d}=c(e),p=function(e){const t=l[e]??e,n=u[t];return n||(console.warn(`No admonition config found for admonition type "${t}". Using Info as fallback.`),u.info)}(n),m=i??p.label,{iconComponent:h}=p,f=d??a.createElement(h,null);return a.createElement("div",{className:(0,o.Z)(r.k.common.admonition,r.k.common.admonitionType(e.type),"alert",`alert--${p.infimaClassName}`,s.admonition)},a.createElement("div",{className:s.admonitionHeading},a.createElement("span",{className:s.admonitionIcon},f),m),a.createElement("div",{className:s.admonitionContent},t))}},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),o=n(6010);const r={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7462),o=n(7294),r=n(6010),i=n(2466),s=n(6550),u=n(1980),l=n(7392),c=n(12);function d(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function p(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,l.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=p(e),[i,s]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[u,l]=h({queryString:n,groupId:a}),[d,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,c.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),y=(()=>{const e=u??d;return m({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{y&&s(y)}),[y]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),l(e),f(e)}),[l,f,r]),tabValues:r}}var y=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function g(e){let{className:t,block:n,selectedValue:s,selectValue:u,tabValues:l}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),a=l[n].value;a!==s&&(d(t),u(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t)},l.map((e=>{let{value:t,label:n,attributes:i}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:p},i,{className:(0,r.Z)("tabs__item",b.tabItem,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=f(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",b.tabList)},o.createElement(g,(0,a.Z)({},e,t)),o.createElement(v,(0,a.Z)({},e,t)))}function w(e){const t=(0,y.Z)();return o.createElement(k,(0,a.Z)({key:String(t)},e))}},7343:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>f,frontMatter:()=>u,metadata:()=>c,toc:()=>p});var a=n(7462),o=(n(7294),n(3905)),r=n(4866),i=n(5162),s=n(3612);const u={sidebar_position:1},l="\ud83d\udca7 Writing an Action",c={unversionedId:"tutorials/writing-an-action",id:"tutorials/writing-an-action",title:"\ud83d\udca7 Writing an Action",description:"Actions are written in python; they define small reusable blocks of functionality.",source:"@site/docs/tutorials/writing-an-action.mdx",sourceDirName:"tutorials",slug:"/tutorials/writing-an-action",permalink:"/tutorials/writing-an-action",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials/writing-an-action.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\ud83e\udde9 Tutorials",permalink:"/category/-tutorials"},next:{title:"\ud83c\udf0a Writing a Workflow",permalink:"/tutorials/writing-a-workflow"}},d={},p=[{value:"\ud83c\udfe1 Inputs and Outputs are Pydantic Models",id:"-inputs-and-outputs-are-pydantic-models",level:2},{value:"\ud83c\udff7\ufe0f Actions have IDs and are Strongly Typed",id:"\ufe0f-actions-have-ids-and-are-strongly-typed",level:2},{value:"\ud83c\udfc3 Actions run asynchronously",id:"-actions-run-asynchronously",level:2},{value:"\ud83e\uddea Actions can easily be previewed",id:"-actions-can-easily-be-previewed",level:2},{value:"\ud83d\udd28 Actions are simple to test",id:"-actions-are-simple-to-test",level:2},{value:"\ud83d\udcdd Actions are Documented with Docstrings",id:"-actions-are-documented-with-docstrings",level:2},{value:"\ud83c\udf15 Quickstart: The Full Code Example",id:"-quickstart-the-full-code-example",level:2}],m={toc:p},h="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"-writing-an-action"},"\ud83d\udca7 Writing an Action"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Actions")," are written in ",(0,o.kt)("strong",{parentName:"p"},"python"),"; they define small reusable blocks of functionality. "),(0,o.kt)("p",null,"They are defined in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/irgolic/AutoPR/tree/main/autopr/actions"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"autopr/actions")," folder"),"."),(0,o.kt)("p",null,"To get acquainted with actions, let's walk through all the elements of a simple action one-by-one.\nOur example action will ",(0,o.kt)("strong",{parentName:"p"},"run a bash command and return its output"),".\nIf you'd like to get started quickly by copying the example action's full code, head to ",(0,o.kt)("a",{parentName:"p",href:"#quickstart-the-full-code-example"},"quickstart at the bottom of the page"),"."),(0,o.kt)("h2",{id:"-inputs-and-outputs-are-pydantic-models"},"\ud83c\udfe1 Inputs and Outputs are Pydantic Models"),(0,o.kt)("p",null,"To configure actions, and for actions to communicate with each other, they may receive ",(0,o.kt)("strong",{parentName:"p"},"inputs")," and send ",(0,o.kt)("strong",{parentName:"p"},"outputs"),". "),(0,o.kt)("p",null,"These are defined with ",(0,o.kt)("a",{parentName:"p",href:"https://docs.pydantic.dev/1.10/"},(0,o.kt)("strong",{parentName:"a"},"pydantic")),", a popular python library for data validation and serialization."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"import pydantic\n\n# Our action will receive a `command` string as its input\nclass BashInputs(pydantic.BaseModel):\n    command: str\n\n\n# Our action will return `stdout` and `stderr` strings as its output, \n# which are the standard output and standard error streams of the command\nclass BashOutputs(pydantic.BaseModel):\n    stdout: str\n    stderr: str\n")),(0,o.kt)("h2",{id:"\ufe0f-actions-have-ids-and-are-strongly-typed"},"\ud83c\udff7\ufe0f Actions have IDs and are Strongly Typed"),(0,o.kt)("p",null,"Each action must have a unique ID, which is used to reference the action in the workflow. This ID must be unique among all actions and workflows."),(0,o.kt)("p",null,"To declare an action with the inputs and outputs defined above, we create a class that inherits from the ",(0,o.kt)("inlineCode",{parentName:"p"},"Action")," class.\nThe inputs and outputs are passed as generic arguments to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Action")," class, and annotated on the ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," method.\nThis might look a bit complicated, but it makes sure that we don't make any mistakes when writing our action."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from autopr.actions.base import Action\n\n\nclass BashAction(Action[BashInputs, BashOutputs]):\n    id = "my-bash"\n    \n    async def run(self, inputs: BashInputs) -> BashOutputs:\n        # TODO execute the command and return the outputs \n        ...\n\n')),(0,o.kt)("p",null,"If an action does not receive inputs or outputs, you can pass ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," as the argument instead of a pydantic model."),(0,o.kt)(r.Z,{mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"noinputs",label:"Without Inputs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class ActionWithoutInputs(Action[None, BashOutputs]):\n    id = "action-without-inputs"\n\n    async def run(self, inputs: None) -> BashOutputs:\n        ...\n'))),(0,o.kt)(i.Z,{value:"nooutputs",label:"Without Outputs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class ActionWithoutInputs(Action[BashInputs, None]):\n    id = "action-without-inputs"\n\n    async def run(self, inputs: BashInputs) -> None:\n        ...\n'))),(0,o.kt)(i.Z,{value:"noio",label:"Without Inputs or Outputs",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class ActionWithoutInputs(Action[None, None]):\n    id = "action-without-inputs"\n\n    async def run(self, inputs: None) -> None:\n        ...\n')))),(0,o.kt)("h2",{id:"-actions-run-asynchronously"},"\ud83c\udfc3 Actions run asynchronously"),(0,o.kt)("p",null,"The action's ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," method is an ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," method, which means that it runs using python's ",(0,o.kt)("a",{parentName:"p",href:"https://docs.python.org/3/library/asyncio.html"},"asyncio")," library.\nThis means that if an action ever has to wait for something, it can do so while yielding control to other actions and not blocking the entire workflow."),(0,o.kt)("p",null,"Finally, let's implement the Bash action's ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import asyncio\n\n\nclass BashAction(Action[BashInputs, BashOutputs]):\n    """\n    Run a bash command and return its output.\n    """\n    \n    id = "my-bash"\n\n    async def run(self, inputs: BashInputs) -> BashOutputs:\n        # Get the input value\n        command = inputs.command\n        \n        # Run the command\n        process = await asyncio.create_subprocess_shell(\n            command,\n            shell=True,\n            stdout=asyncio.subprocess.PIPE,\n            stderr=asyncio.subprocess.PIPE,\n        )\n        # Get standard output and standard error streams\n        stdout, stderr = await process.communicate()\n\n        # Set the output values\n        return BashOutputs(\n            stdout=stdout.decode("utf-8"),\n            stderr=stderr.decode("utf-8"),\n        )\n')),(0,o.kt)("h2",{id:"-actions-can-easily-be-previewed"},"\ud83e\uddea Actions can easily be previewed"),(0,o.kt)("p",null,"To preview an action, you can run it manually using the ",(0,o.kt)("inlineCode",{parentName:"p"},"run_action_manually")," utility function.\nThis will create a temporary GitHub repository, and run the action in it.\nFeel free to use this space as a scratchpad to test your action."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# When you run this file\nif __name__ == "__main__":\n    from autopr.tests.utils import run_action_manually\n    asyncio.run(\n        # Run the action manually\n        run_action_manually(\n            action=BashAction,\n            inputs=BashInputs(\n                command="echo \'Hello World!\'"\n            ),\n        )\n    )\n')),(0,o.kt)(s.Z,{type:"tip",icon:"",title:"Output",mdxType:"Admonition"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Start section: \ud83d\ude80 Running my_bash-3\nInputs: {\n  "command": "echo \'Hello World!\'"\n}\nOutputs: {\n  "stderr": "",\n  "stdout": "Hello World!\\n"\n}\nEnd section\n'))),(0,o.kt)("h2",{id:"-actions-are-simple-to-test"},"\ud83d\udd28 Actions are simple to test"),(0,o.kt)("p",null,"When you implement an action, please add a test for it in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/irgolic/AutoPR/tree/main/autopr/tests/test_actions.py"},"the ",(0,o.kt)("inlineCode",{parentName:"a"},"tests/test_actions.py")," file"),".\nThis can be as simple as adding a test case to the list of parameters in the ",(0,o.kt)("inlineCode",{parentName:"p"},"test_workflow")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\n@pytest.mark.parametrize(\n    "action_id, inputs, expected_outputs, repo_resource",\n    [\n        ...\n\n        # Add a test case for your action, specifying:\n        (\n            # its ID;\n            "my-bash",\n            # sample inputs to run the action with;\n            {\n                "command": "echo Hello world!",\n            },\n            # the expected outputs;\n            {\n                "stdout": "Hello world!\\n",\n                "stderr": "",\n            },\n            # if necessary, the name of a mock repository resource to use (see `tests/resources/repos`);\n            None,\n        ),\n\n        ...\n    ]\n)\n@pytest.mark.asyncio\nasync def test_actions(\n    mocker,\n    action_id: ExecutableId,\n    inputs: ContextDict,\n    expected_outputs: dict[str, Any],\n    repo_resource: Optional[str],\n):\n    ...\n\n    outputs = await run_action_manually(\n        action=action_id,\n        inputs=inputs,\n        repo_resource=repo_resource\n    )\n    assert outputs == expected_outputs\n\n')),(0,o.kt)("h2",{id:"-actions-are-documented-with-docstrings"},"\ud83d\udcdd Actions are Documented with Docstrings"),(0,o.kt)("p",null,"Docstrings are used to document actions, and are displayed in the generated action reference documentation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'class BashAction(Action[BashInputs, BashOutputs]):\n    """\n    Run a bash command and return its output.\n    """\n\n    id = "my-bash"\n\n    async def run(self, inputs: BashInputs) -> BashOutputs:\n        ...\n')),(0,o.kt)("h2",{id:"-quickstart-the-full-code-example"},"\ud83c\udf15 Quickstart: The Full Code Example"),(0,o.kt)("p",null,"Create a new file in the ",(0,o.kt)("inlineCode",{parentName:"p"},"actions")," directory, and use this as a template to get started."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python",metastring:'title="autopr/actions/bash.py"',title:'"autopr/actions/bash.py"'},'import asyncio\n\nimport pydantic\n\nfrom autopr.actions.base import Action\n\n\n# The action\'s inputs\nclass Inputs(pydantic.BaseModel):\n    command: str\n\n\n# The action\'s outputs\nclass Outputs(pydantic.BaseModel):\n    stdout: str\n    stderr: str\n\n\nclass Bash(Action[Inputs, Outputs]):\n    """\n    Run a bash command and return its output.\n    """\n\n    id = "my-bash"\n\n    async def run(self, inputs: Inputs) -> Outputs:\n        # Get the input value\n        command = inputs.command\n\n        # Run the command\n        process = await asyncio.create_subprocess_shell(\n            command,\n            shell=True,\n            stdout=asyncio.subprocess.PIPE,\n            stderr=asyncio.subprocess.PIPE,\n        )\n        # Get standard output and standard error streams\n        stdout, stderr = await process.communicate()\n\n        # Set the output values\n        return Outputs(\n            stdout=stdout.decode("utf-8"),\n            stderr=stderr.decode("utf-8"),\n        )\n\n\n# When you run this file\nif __name__ == "__main__":\n    from autopr.tests.utils import run_action_manually\n    asyncio.run(\n        # Run the action manually\n        run_action_manually(\n            action=Bash,\n            inputs=Inputs(\n                command="echo \'Hello World!\'"\n            ),\n        )\n    )\n\n')))}f.isMDXComponent=!0}}]);